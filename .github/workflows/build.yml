name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: event-app

jobs:
  build:
    name: Buld
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      #      - name: Login to GitHub Container Registry
      #        run: echo "${{ secrets.PAT }}" | docker login $REGISTRY -u ${{ github.actor }} --password-stdin
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      #      - name: Tag & publish to GitHub Container Registry
      #        run: |
      #          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
      #          VERSION=latest
      #          DOCKER_TAG=$IMAGE_ID:$VERSION
      #          docker build . --tag $DOCKER_TAG
      #          docker push $DOCKER_TAG

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ github.repository_owner }}/event-app:latest
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      packages: write

    steps:
#      - name: Login to GitHub Container Registry
      #        run: echo "${{ secrets.PAT }}" | docker login $REGISTRY -u ${{ github.actor }} --password-stdin

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: install ssh keys
        uses: kielabokkie/ssh-key-and-known-hosts-action@v1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ssh-host: ${{ secrets.SSH_HOST }}

      - name: create docker context
        run: |
          docker context create remote --docker host=ssh://${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - run: sudo curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
      - run: sudo chmod +x /usr/local/bin/docker-compose
      - name: create docker context
        run: |
          docker-compose --version
          docker-compose --context remote up -d        

      #      - name: create docker compose config
      #        run: |
      #          cat docker-compose.yml | envsubst > docker-compose-secret.yml
      #      - name: copy docker
      #        run: scp docker-compose-secret.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:docker-compose.yml

      - name: connect and pull
        env:
          CHAT_ID_DOCKER: ${{ secrets.CHAT_ID_PROD }}
          DB_URL_DOCKER: ${{ secrets.DB_URL_PROD }}
          DB_USER_DOCKER: ${{ secrets.DB_USER_PROD }}
          DB_PASSWORD_DOCKER: ${{ secrets.DB_PASSWORD_PROD }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          IMAGE_REF: ${{ steps.meta.outputs.tags }}
        run: |
          docker-compose --context remote up -d
      #          docker-compose --context remote -f docker-compose.yml up -d
      #              run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "docker-compose --context remote docker-compose pull && docker-compose up -d && exit"
      - name: cleanup keys
        if: always()
        run: rm -rf ~/.ssh docker-compose-secret.yml